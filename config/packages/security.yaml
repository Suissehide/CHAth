security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

    role_hierarchy:
        ROLE_GUEST: ROLE_GUEST
        ROLE_USER: [ROLE_USER]
        ROLE_ADMIN: [ROLE_USER, ROLE_ADMIN]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_SUPER_ADMIN]

    providers:
        users:
            name: user_provider
            entity:
                class: App\Entity\Utilisateur
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
            pattern: ^/
            form_login:
                login_path: login
                check_path: login
                default_target_path: onAuthenticationSuccess
                username_parameter: _email
                provider: user_provider
                # default_target_path: index_participant
                always_use_default_target_path: true
            logout:
                path: logout
                target: login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/, roles: IS_AUTHENTICATED_REMEMBERED }

        - { path: ^/register, role: PUBLIC_ACCESS}
        - { path: ^/login, role: PUBLIC_ACCESS}
        - { path: ^/onAuthenticationSuccess, role: PUBLIC_ACCESS}
        - { path: ^/utilisateur/edit, role: PUBLIC_ACCESS}
        - { path: ^/utilisateur/list, role: ROLE_ADMIN}
        - { path: ^/guest, role: ROLE_GUEST}
        - { path: ^/, role: ROLE_USER}
        

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
